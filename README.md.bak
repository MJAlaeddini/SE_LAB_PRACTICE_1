
<h2 dir="rtl">
پاسخ سوالات تئوری
</h2>

<h2 dir="rtl">
فایل .git
</h2>

<p dir="rtl">
پوشه .git پوشه اصلی نگه‌داری لاگ ها و تمامی اطلاعات در یک مخزن گیت می‌باشد که این اطلاعات شامل درخت حاوی commit ها و تغییرات در هر کامیت نسبت به کامیت قبلی است همچنین  اطلاعات مخازن و هر یک از Branchها و branch کنونی و... می‌باشد
</p>

<h2 dir="rtl">
 معنی Atomic commit و Atomic pull request
</h2>

<p dir="rtl">
بدین معنی است که در هر کامیت تنها یک کار مجزا باید انجام شود همچنین Commitهای مربوط به bugfix یا refactoring یا features باید از یکدگیر جدا شوند. هر کامیت باید از کامیت کردن تغییرات متعدد به صورت یکجا پرهیز گردد و هر کامیت باید تنها یک گام ما را به حالت مورد انتظار نزدیک کند همچنین باید توجه داشت که هر کامیت باید کد را در یک موقعیت Valid نگه دارد همچنین Atomic pull request بدین معنی است که حتی الامکان باید pull requestها به کارهای کوچکتر شکسته شوند وreview  کردن آن‌ها نباید چندین ساعت طول بکشد و به جای یک تسک بزرگ، کارها به تعداد بیشتری task یا issueی کوچک شکسته شوند که هر یک در یک PR قابل انجام باشند
</p>

<h2 dir="rtl">
 تفاوت Fetch،  Pull و  Rebaseو  Cherrypickو  Merge
</h2>


<p dir="rtl">
دستور Fetch صرفا اطلاعات موجود در مخزن را نسبت به یکی از مخازن Remote به روز می‌کند یعنی اشیاء و Branchهای پروژه را از یک مخزن Remote دانلود کرده و در پوشه .git ذخیره می‌کند. اما دستور pull هم تغییرات را از مخازن Remote می‌گید، هم آن‌ها را با نسخه‌ی کنونی ادغام می‌کند عملیات Merge نیز یکی از راه‌های ادغام دو نسخه است بدین صورت که فایل‌های تغییر یافته در یک نسخه که در نسخه‌ی دیگر تغییر پیدا نکرده‌اند در نسخه‌ی نهایی تغییر می‌کنند و قسمت‌هایی که در هر دو نسخه تغییر کرده‌اند دچار تعارض (Conflict) می‌شوند و توسط شخصی که آن‌ها را ادغام کرده باید برطرف شوند با استفاده از cherrypick میتوان چند کامیت خاص را به Branch خود منتقل کرد و با Rebase  میتوان تمام یک Branch را منتقل کرد (تمام تاریخچه commit ها منتقل میشود)
</p>

<h2 dir="rtl">
 تفاوت دستورهای  revert و rebase  و  reset و restore  و switch و checkout
</h2>

<h2 dir="rtl">
دستور reset
</h2>

<p dir="rtl">
دستور git reset برای بازگرداندن فایل‌ها به حالت قبل استفاده می‌شود مثلا فایل‌هایی که با دستور  git add به stage رفته‌اند با استفاده از git reset از stage خارج می‌شوند
</p>

<h2 dir="rtl">
دستور restore
</h2>

<p dir="rtl">
دستور git restore برای بازیابی تغییرات فایل‌ها به وضعیت قبلی استفاده می‌شود با این دستور می‌توان فایل‌هایی را که تغییر کرده‌اند، به وضعیت قبلی بازگرداند و تغییرات آن‌ها را برطرف کرد
</p>

<h2 dir="rtl">
دستور revert
</h2>

<p dir="rtl">
دستور git revert یک عملیات خنثی سازی رو به جلو است که روشی امن برای لغو تغییرات ارائه می دهد به جای حذف کردن commit ها در تاریخچه commit، یک revert یک commit جدید ایجاد می کند که تغییرات مشخص شده را معکوس می کند  Git Revert  یک جایگزین مطمئن‌تر برای تنظیم مجدد git در مورد از دست دادن کار است
</p>

<h2 dir="rtl">
دستور switch
</h2>

<p dir="rtl">
دستور switch برای تغییر و جابه جایی بین branch ها استفاده میشود
</p>

<h2 dir="rtl">
دستور checkout
</h2>

<p dir="rtl">
دستور checkout علاوه بر ثبت commit قابلیت‌های دیگر مثل بازگرداندن فایل‌ها از commit خاص، ایجاد commit جدید و به روز رسانی را هم دارد
</p>



<h2 dir="rtl">
 منظور ازstage  و دستور stash 
</h2>

<p dir="rtl">
عملیات stage بدین معنی است که تعدادی از فایل‌های تغییر کرده در این نسخه را علامت گذاری کرده تا در snapshot    commit بعدی حضور داشته باشند هنگامی که این تغییرات commit شوند با موفقیت در پایگاه داده محلی مخزن ذخیره می‌شوند دستور stash  به صورت موقت تغییراتی که شما انجام شده ولی هنوز کامیت نشده را کنار می‌گذارد تا بتوان روی چیز دیگری کار کرد و سپس میتوان برگشت و دوباره تغییرات قبلی را اعمال کرد
</p>

<h2 dir="rtl">
 مفهوم snapshot
</h2>

<p dir="rtl">
snapshot معادل یک commit است با هر کامیت، گیت یک snapshot از وضعیت فعلی پروژه ذخیر می‌کند در نگاه اول مشخص است که نگه‌داری وضعیت کل پروژه در تمامی کامیت‌ها، نیازمند نگه‌ داری حجم زیادی داده است که بهینه نیست پس برای حل این مشکل گیت فقط تغییرات نسبت به کامیت قبل را در هر کامیت نگه داری می‌کند و با استفاده از این تغییرات می‌تواند نسخه‌های قدیمی‌تر را بسازد و بازیابی کند
</p>

<h2 dir="rtl">
 تفاوت local repository  و remote repository
</h2>

<h2 dir="rtl">
 local repository
</h2>

<p dir="rtl">
یک مخزن محلی است که بر روی دستگاه شخصی یک فرد نگهداری می‌شود. این نوع مخزن برای استفاده فردی مناسب است و امکان استفاده از ویژگی‌های کنترل نسخه Git را فراهم می‌کند، اما قابلیت همکاری مانند pull و push تغییرات کد با همکاران تنها در remote repository وجود دارد
</p>

<h2 dir="rtl">
 remote repository
</h2>

<p dir="rtl">
یک مخزن روی یک سرور دور (مثلاً در اینترنت یا سرور خارج از دستگاه شخصی) قرار دارد و بین چندین عضو تیم به اشتراک گذاشته می‌شود در remote repository امکان همکاری مانند pull و push تغییرات کد با همکاران وجود دارد در حالی که این قابلیت در local repository وجود ندارد
</p>

